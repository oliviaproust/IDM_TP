/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.botch.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.botch.ide.contentassist.antlr.internal.InternalB0tchParser;
import org.xtext.example.botch.services.B0tchGrammarAccess;

public class B0tchParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(B0tchGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, B0tchGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getMetriqueAccess().getAlternatives(), "rule__Metrique__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getDirectionAccess().getAlternatives(), "rule__Direction__Alternatives");
			builder.put(grammarAccess.getSensRotationAccess().getAlternatives(), "rule__SensRotation__Alternatives");
			builder.put(grammarAccess.getAddAccess().getGroup(), "rule__Add__Group__0");
			builder.put(grammarAccess.getConsultVariableAccess().getGroup(), "rule__ConsultVariable__Group__0");
			builder.put(grammarAccess.getConstanteAccess().getGroup(), "rule__Constante__Group__0");
			builder.put(grammarAccess.getConstanteAccess().getGroup_3(), "rule__Constante__Group_3__0");
			builder.put(grammarAccess.getCallFonctionAccess().getGroup(), "rule__CallFonction__Group__0");
			builder.put(grammarAccess.getCallFonctionAccess().getGroup_2(), "rule__CallFonction__Group_2__0");
			builder.put(grammarAccess.getMinusAccess().getGroup(), "rule__Minus__Group__0");
			builder.put(grammarAccess.getTimesAccess().getGroup(), "rule__Times__Group__0");
			builder.put(grammarAccess.getDivideAccess().getGroup(), "rule__Divide__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getInverseAccess().getGroup(), "rule__Inverse__Group__0");
			builder.put(grammarAccess.getNotAccess().getGroup(), "rule__Not__Group__0");
			builder.put(grammarAccess.getMoreThanAccess().getGroup(), "rule__MoreThan__Group__0");
			builder.put(grammarAccess.getLessThanAccess().getGroup(), "rule__LessThan__Group__0");
			builder.put(grammarAccess.getEqualAccess().getGroup(), "rule__Equal__Group__0");
			builder.put(grammarAccess.getDefVariableAccess().getGroup(), "rule__DefVariable__Group__0");
			builder.put(grammarAccess.getDefVariableAccess().getGroup_2(), "rule__DefVariable__Group_2__0");
			builder.put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
			builder.put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
			builder.put(grammarAccess.getVoidAccess().getGroup(), "rule__Void__Group__0");
			builder.put(grammarAccess.getDefFonctionAccess().getGroup(), "rule__DefFonction__Group__0");
			builder.put(grammarAccess.getDefFonctionAccess().getGroup_3(), "rule__DefFonction__Group_3__0");
			builder.put(grammarAccess.getDefFonctionAccess().getGroup_4(), "rule__DefFonction__Group_4__0");
			builder.put(grammarAccess.getDefFonctionAccess().getGroup_4_3(), "rule__DefFonction__Group_4_3__0");
			builder.put(grammarAccess.getMovementAccess().getGroup(), "rule__Movement__Group__0");
			builder.put(grammarAccess.getMovementAccess().getGroup_2(), "rule__Movement__Group_2__0");
			builder.put(grammarAccess.getMovementAccess().getGroup_3(), "rule__Movement__Group_3__0");
			builder.put(grammarAccess.getRotationAccess().getGroup(), "rule__Rotation__Group__0");
			builder.put(grammarAccess.getRotationAccess().getGroup_3(), "rule__Rotation__Group_3__0");
			builder.put(grammarAccess.getRotationAccess().getGroup_4(), "rule__Rotation__Group_4__0");
			builder.put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup_2(), "rule__Loop__Group_2__0");
			builder.put(grammarAccess.getLoopAccess().getGroup_2_3(), "rule__Loop__Group_2_3__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_2(), "rule__Condition__Group_2__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_2_3(), "rule__Condition__Group_2_3__0");
			builder.put(grammarAccess.getSetSpeedAccess().getGroup(), "rule__SetSpeed__Group__0");
			builder.put(grammarAccess.getSetSpeedAccess().getGroup_2(), "rule__SetSpeed__Group_2__0");
			builder.put(grammarAccess.getGetTimestampAccess().getGroup(), "rule__GetTimestamp__Group__0");
			builder.put(grammarAccess.getCentimeterAccess().getGroup(), "rule__Centimeter__Group__0");
			builder.put(grammarAccess.getMeterAccess().getGroup(), "rule__Meter__Group__0");
			builder.put(grammarAccess.getMillimeterAccess().getGroup(), "rule__Millimeter__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getAddAccess().getXAssignment_3(), "rule__Add__XAssignment_3");
			builder.put(grammarAccess.getAddAccess().getYAssignment_5(), "rule__Add__YAssignment_5");
			builder.put(grammarAccess.getConsultVariableAccess().getDefvariableAssignment_3(), "rule__ConsultVariable__DefvariableAssignment_3");
			builder.put(grammarAccess.getConstanteAccess().getValueAssignment_3_1(), "rule__Constante__ValueAssignment_3_1");
			builder.put(grammarAccess.getCallFonctionAccess().getLibelleAssignment_2_1(), "rule__CallFonction__LibelleAssignment_2_1");
			builder.put(grammarAccess.getCallFonctionAccess().getRefFonctionAssignment_4(), "rule__CallFonction__RefFonctionAssignment_4");
			builder.put(grammarAccess.getMinusAccess().getXAssignment_3(), "rule__Minus__XAssignment_3");
			builder.put(grammarAccess.getMinusAccess().getYAssignment_5(), "rule__Minus__YAssignment_5");
			builder.put(grammarAccess.getTimesAccess().getXAssignment_3(), "rule__Times__XAssignment_3");
			builder.put(grammarAccess.getTimesAccess().getYAssignment_5(), "rule__Times__YAssignment_5");
			builder.put(grammarAccess.getDivideAccess().getXAssignment_3(), "rule__Divide__XAssignment_3");
			builder.put(grammarAccess.getDivideAccess().getYAssignment_5(), "rule__Divide__YAssignment_5");
			builder.put(grammarAccess.getAndAccess().getXAssignment_3(), "rule__And__XAssignment_3");
			builder.put(grammarAccess.getAndAccess().getYAssignment_5(), "rule__And__YAssignment_5");
			builder.put(grammarAccess.getOrAccess().getXAssignment_3(), "rule__Or__XAssignment_3");
			builder.put(grammarAccess.getOrAccess().getYAssignment_5(), "rule__Or__YAssignment_5");
			builder.put(grammarAccess.getInverseAccess().getXAssignment_3(), "rule__Inverse__XAssignment_3");
			builder.put(grammarAccess.getNotAccess().getXAssignment_3(), "rule__Not__XAssignment_3");
			builder.put(grammarAccess.getMoreThanAccess().getXAssignment_3(), "rule__MoreThan__XAssignment_3");
			builder.put(grammarAccess.getMoreThanAccess().getYAssignment_5(), "rule__MoreThan__YAssignment_5");
			builder.put(grammarAccess.getLessThanAccess().getXAssignment_3(), "rule__LessThan__XAssignment_3");
			builder.put(grammarAccess.getLessThanAccess().getYAssignment_5(), "rule__LessThan__YAssignment_5");
			builder.put(grammarAccess.getEqualAccess().getXAssignment_3(), "rule__Equal__XAssignment_3");
			builder.put(grammarAccess.getEqualAccess().getYAssignment_5(), "rule__Equal__YAssignment_5");
			builder.put(grammarAccess.getDefVariableAccess().getLibelleAssignment_2_1(), "rule__DefVariable__LibelleAssignment_2_1");
			builder.put(grammarAccess.getDefVariableAccess().getTypeAssignment_4(), "rule__DefVariable__TypeAssignment_4");
			builder.put(grammarAccess.getDefVariableAccess().getValeurAssignment_6(), "rule__DefVariable__ValeurAssignment_6");
			builder.put(grammarAccess.getDefFonctionAccess().getLibelleAssignment_3_1(), "rule__DefFonction__LibelleAssignment_3_1");
			builder.put(grammarAccess.getDefFonctionAccess().getBlocAssignment_4_2(), "rule__DefFonction__BlocAssignment_4_2");
			builder.put(grammarAccess.getDefFonctionAccess().getBlocAssignment_4_3_1(), "rule__DefFonction__BlocAssignment_4_3_1");
			builder.put(grammarAccess.getMovementAccess().getDirectionAssignment_2_1(), "rule__Movement__DirectionAssignment_2_1");
			builder.put(grammarAccess.getMovementAccess().getDistanceAssignment_3_1(), "rule__Movement__DistanceAssignment_3_1");
			builder.put(grammarAccess.getMovementAccess().getMetriqueAssignment_5(), "rule__Movement__MetriqueAssignment_5");
			builder.put(grammarAccess.getRotationAccess().getSensAssignment_3_1(), "rule__Rotation__SensAssignment_3_1");
			builder.put(grammarAccess.getRotationAccess().getDegreAssignment_4_1(), "rule__Rotation__DegreAssignment_4_1");
			builder.put(grammarAccess.getLoopAccess().getBlocAssignment_2_2(), "rule__Loop__BlocAssignment_2_2");
			builder.put(grammarAccess.getLoopAccess().getBlocAssignment_2_3_1(), "rule__Loop__BlocAssignment_2_3_1");
			builder.put(grammarAccess.getLoopAccess().getConditionAssignment_4(), "rule__Loop__ConditionAssignment_4");
			builder.put(grammarAccess.getConditionAccess().getBlocAssignment_2_2(), "rule__Condition__BlocAssignment_2_2");
			builder.put(grammarAccess.getConditionAccess().getBlocAssignment_2_3_1(), "rule__Condition__BlocAssignment_2_3_1");
			builder.put(grammarAccess.getConditionAccess().getConditionAssignment_4(), "rule__Condition__ConditionAssignment_4");
			builder.put(grammarAccess.getSetSpeedAccess().getVitesseAssignment_2_1(), "rule__SetSpeed__VitesseAssignment_2_1");
			builder.put(grammarAccess.getSetSpeedAccess().getMetriqueAssignment_4(), "rule__SetSpeed__MetriqueAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private B0tchGrammarAccess grammarAccess;

	@Override
	protected InternalB0tchParser createParser() {
		InternalB0tchParser result = new InternalB0tchParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public B0tchGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(B0tchGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
