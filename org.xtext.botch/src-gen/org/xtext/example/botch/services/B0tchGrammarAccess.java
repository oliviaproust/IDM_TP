/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.botch.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class B0tchGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Add returns Add:
		//    'Add'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Add'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConsultVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstanteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCallFonctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAddParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMinusParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDivideParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAndParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOrParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInverseParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNotParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMoreThanParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLessThanParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cEqualParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//Expression returns Expression:
		//    ConsultVariable | Constante | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal;
		@Override public ParserRule getRule() { return rule; }
		
		//ConsultVariable | Constante | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConsultVariable
		public RuleCall getConsultVariableParserRuleCall_0() { return cConsultVariableParserRuleCall_0; }
		
		//Constante
		public RuleCall getConstanteParserRuleCall_1() { return cConstanteParserRuleCall_1; }
		
		//CallFonction
		public RuleCall getCallFonctionParserRuleCall_2() { return cCallFonctionParserRuleCall_2; }
		
		//Add
		public RuleCall getAddParserRuleCall_3() { return cAddParserRuleCall_3; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_4() { return cMinusParserRuleCall_4; }
		
		//Times
		public RuleCall getTimesParserRuleCall_5() { return cTimesParserRuleCall_5; }
		
		//Divide
		public RuleCall getDivideParserRuleCall_6() { return cDivideParserRuleCall_6; }
		
		//And
		public RuleCall getAndParserRuleCall_7() { return cAndParserRuleCall_7; }
		
		//Or
		public RuleCall getOrParserRuleCall_8() { return cOrParserRuleCall_8; }
		
		//Inverse
		public RuleCall getInverseParserRuleCall_9() { return cInverseParserRuleCall_9; }
		
		//Not
		public RuleCall getNotParserRuleCall_10() { return cNotParserRuleCall_10; }
		
		//MoreThan
		public RuleCall getMoreThanParserRuleCall_11() { return cMoreThanParserRuleCall_11; }
		
		//LessThan
		public RuleCall getLessThanParserRuleCall_12() { return cLessThanParserRuleCall_12; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_13() { return cEqualParserRuleCall_13; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVoidParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type returns Type:
		//    Number | Boolean | Void;
		@Override public ParserRule getRule() { return rule; }
		
		//Number | Boolean | Void
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }
		
		//Void
		public RuleCall getVoidParserRuleCall_2() { return cVoidParserRuleCall_2; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMovementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConditionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDefFonctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConsultVariableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConstanteParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSetSpeedParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cGetTimestampParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cCallFonctionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAddParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cMinusParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cTimesParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDivideParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cAndParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cOrParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cInverseParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cNotParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cMoreThanParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cLessThanParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cEqualParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		
		//Instruction returns Instruction:
		//    Movement | Rotation | Loop | DefVariable | Condition | DefFonction | ConsultVariable | Constante | SetSpeed | getTimestamp | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal;
		@Override public ParserRule getRule() { return rule; }
		
		//Movement | Rotation | Loop | DefVariable | Condition | DefFonction | ConsultVariable | Constante | SetSpeed | getTimestamp | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Movement
		public RuleCall getMovementParserRuleCall_0() { return cMovementParserRuleCall_0; }
		
		//Rotation
		public RuleCall getRotationParserRuleCall_1() { return cRotationParserRuleCall_1; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }
		
		//DefVariable
		public RuleCall getDefVariableParserRuleCall_3() { return cDefVariableParserRuleCall_3; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_4() { return cConditionParserRuleCall_4; }
		
		//DefFonction
		public RuleCall getDefFonctionParserRuleCall_5() { return cDefFonctionParserRuleCall_5; }
		
		//ConsultVariable
		public RuleCall getConsultVariableParserRuleCall_6() { return cConsultVariableParserRuleCall_6; }
		
		//Constante
		public RuleCall getConstanteParserRuleCall_7() { return cConstanteParserRuleCall_7; }
		
		//SetSpeed
		public RuleCall getSetSpeedParserRuleCall_8() { return cSetSpeedParserRuleCall_8; }
		
		//getTimestamp
		public RuleCall getGetTimestampParserRuleCall_9() { return cGetTimestampParserRuleCall_9; }
		
		//CallFonction
		public RuleCall getCallFonctionParserRuleCall_10() { return cCallFonctionParserRuleCall_10; }
		
		//Add
		public RuleCall getAddParserRuleCall_11() { return cAddParserRuleCall_11; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_12() { return cMinusParserRuleCall_12; }
		
		//Times
		public RuleCall getTimesParserRuleCall_13() { return cTimesParserRuleCall_13; }
		
		//Divide
		public RuleCall getDivideParserRuleCall_14() { return cDivideParserRuleCall_14; }
		
		//And
		public RuleCall getAndParserRuleCall_15() { return cAndParserRuleCall_15; }
		
		//Or
		public RuleCall getOrParserRuleCall_16() { return cOrParserRuleCall_16; }
		
		//Inverse
		public RuleCall getInverseParserRuleCall_17() { return cInverseParserRuleCall_17; }
		
		//Not
		public RuleCall getNotParserRuleCall_18() { return cNotParserRuleCall_18; }
		
		//MoreThan
		public RuleCall getMoreThanParserRuleCall_19() { return cMoreThanParserRuleCall_19; }
		
		//LessThan
		public RuleCall getLessThanParserRuleCall_20() { return cLessThanParserRuleCall_20; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_21() { return cEqualParserRuleCall_21; }
	}
	public class MetriqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Metrique");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCentimeterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMeterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMillimeterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Metrique returns Metrique:
		//    Centimeter | Meter | Millimeter;
		@Override public ParserRule getRule() { return rule; }
		
		//Centimeter | Meter | Millimeter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Centimeter
		public RuleCall getCentimeterParserRuleCall_0() { return cCentimeterParserRuleCall_0; }
		
		//Meter
		public RuleCall getMeterParserRuleCall_1() { return cMeterParserRuleCall_1; }
		
		//Millimeter
		public RuleCall getMillimeterParserRuleCall_2() { return cMillimeterParserRuleCall_2; }
	}
	public class ConsultVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.ConsultVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsultVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefvariableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefvariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefvariableDefVariableCrossReference_3_0 = (CrossReference)cDefvariableAssignment_3.eContents().get(0);
		private final RuleCall cDefvariableDefVariableEStringParserRuleCall_3_0_1 = (RuleCall)cDefvariableDefVariableCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConsultVariable returns ConsultVariable:
		//    'ConsultVariable'
		//    '{'
		//        'defvariable' defvariable=[DefVariable|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ConsultVariable'
		//'{'
		//    'defvariable' defvariable=[DefVariable|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ConsultVariable'
		public Keyword getConsultVariableKeyword_0() { return cConsultVariableKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'defvariable'
		public Keyword getDefvariableKeyword_2() { return cDefvariableKeyword_2; }
		
		//defvariable=[DefVariable|EString]
		public Assignment getDefvariableAssignment_3() { return cDefvariableAssignment_3; }
		
		//[DefVariable|EString]
		public CrossReference getDefvariableDefVariableCrossReference_3_0() { return cDefvariableDefVariableCrossReference_3_0; }
		
		//EString
		public RuleCall getDefvariableDefVariableEStringParserRuleCall_3_0_1() { return cDefvariableDefVariableEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConstanteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Constante");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstanteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstanteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constante returns Constante:
		//    {Constante}
		//    'Constante'
		//    '{'
		//        ('value' value=Double)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Constante}
		//'Constante'
		//'{'
		//    ('value' value=Double)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Constante}
		public Action getConstanteAction_0() { return cConstanteAction_0; }
		
		//'Constante'
		public Keyword getConstanteKeyword_1() { return cConstanteKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=Double)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=Double
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_3_1_0() { return cValueDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CallFonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.CallFonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallFonctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLibelleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLibelleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLibelleString0ParserRuleCall_2_1_0 = (RuleCall)cLibelleAssignment_2_1.eContents().get(0);
		private final Keyword cRefFonctionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefFonctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefFonctionDefFonctionCrossReference_4_0 = (CrossReference)cRefFonctionAssignment_4.eContents().get(0);
		private final RuleCall cRefFonctionDefFonctionEStringParserRuleCall_4_0_1 = (RuleCall)cRefFonctionDefFonctionCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CallFonction returns CallFonction:
		//    'CallFonction'
		//    '{'
		//        ('libelle' libelle=String0)?
		//        'refFonction' refFonction=[DefFonction|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CallFonction'
		//'{'
		//    ('libelle' libelle=String0)?
		//    'refFonction' refFonction=[DefFonction|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CallFonction'
		public Keyword getCallFonctionKeyword_0() { return cCallFonctionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('libelle' libelle=String0)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'libelle'
		public Keyword getLibelleKeyword_2_0() { return cLibelleKeyword_2_0; }
		
		//libelle=String0
		public Assignment getLibelleAssignment_2_1() { return cLibelleAssignment_2_1; }
		
		//String0
		public RuleCall getLibelleString0ParserRuleCall_2_1_0() { return cLibelleString0ParserRuleCall_2_1_0; }
		
		//'refFonction'
		public Keyword getRefFonctionKeyword_3() { return cRefFonctionKeyword_3; }
		
		//refFonction=[DefFonction|EString]
		public Assignment getRefFonctionAssignment_4() { return cRefFonctionAssignment_4; }
		
		//[DefFonction|EString]
		public CrossReference getRefFonctionDefFonctionCrossReference_4_0() { return cRefFonctionDefFonctionCrossReference_4_0; }
		
		//EString
		public RuleCall getRefFonctionDefFonctionEStringParserRuleCall_4_0_1() { return cRefFonctionDefFonctionEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Minus returns Minus:
		//    'Minus'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Minus'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Minus'
		public Keyword getMinusKeyword_0() { return cMinusKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TimesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Times");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Times returns Times:
		//    'Times'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Times'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Times'
		public Keyword getTimesKeyword_0() { return cTimesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Divide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Divide returns Divide:
		//    'Divide'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Divide'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Divide'
		public Keyword getDivideKeyword_0() { return cDivideKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//And returns And:
		//    'And'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'And'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Or returns Or:
		//    'Or'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Or'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InverseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Inverse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInverseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Inverse returns Inverse:
		//    'Inverse'
		//    '{'
		//        'x' x=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Inverse'
		//'{'
		//    'x' x=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Inverse'
		public Keyword getInverseKeyword_0() { return cInverseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Not returns Not:
		//    'Not'
		//    '{'
		//        'x' x=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not'
		//'{'
		//    'x' x=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MoreThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.MoreThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoreThanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MoreThan returns MoreThan:
		//    'MoreThan'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MoreThan'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'MoreThan'
		public Keyword getMoreThanKeyword_0() { return cMoreThanKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class LessThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.LessThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LessThan returns LessThan:
		//    'LessThan'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LessThan'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'LessThan'
		public Keyword getLessThanKeyword_0() { return cLessThanKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cXKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXExpressionParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYExpressionParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Equal returns Equal:
		//    'Equal'
		//    '{'
		//        'x' x=Expression
		//        'y' y=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Equal'
		//'{'
		//    'x' x=Expression
		//    'y' y=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Equal'
		public Keyword getEqualKeyword_0() { return cEqualKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'x'
		public Keyword getXKeyword_2() { return cXKeyword_2; }
		
		//x=Expression
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//Expression
		public RuleCall getXExpressionParserRuleCall_3_0() { return cXExpressionParserRuleCall_3_0; }
		
		//'y'
		public Keyword getYKeyword_4() { return cYKeyword_4; }
		
		//y=Expression
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//Expression
		public RuleCall getYExpressionParserRuleCall_5_0() { return cYExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DefVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.DefVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLibelleKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLibelleAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLibelleEStringParserRuleCall_2_1_0 = (RuleCall)cLibelleAssignment_2_1.eContents().get(0);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cValeurKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValeurAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValeurExpressionParserRuleCall_6_0 = (RuleCall)cValeurAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DefVariable returns DefVariable:
		//    'DefVariable'
		//    '{'
		//        ('libelle' libelle=EString)?
		//        'type' type=Type
		//        'valeur' valeur=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DefVariable'
		//'{'
		//    ('libelle' libelle=EString)?
		//    'type' type=Type
		//    'valeur' valeur=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DefVariable'
		public Keyword getDefVariableKeyword_0() { return cDefVariableKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('libelle' libelle=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'libelle'
		public Keyword getLibelleKeyword_2_0() { return cLibelleKeyword_2_0; }
		
		//libelle=EString
		public Assignment getLibelleAssignment_2_1() { return cLibelleAssignment_2_1; }
		
		//EString
		public RuleCall getLibelleEStringParserRuleCall_2_1_0() { return cLibelleEStringParserRuleCall_2_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=Type
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_0() { return cTypeTypeParserRuleCall_4_0; }
		
		//'valeur'
		public Keyword getValeurKeyword_5() { return cValeurKeyword_5; }
		
		//valeur=Expression
		public Assignment getValeurAssignment_6() { return cValeurAssignment_6; }
		
		//Expression
		public RuleCall getValeurExpressionParserRuleCall_6_0() { return cValeurExpressionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Number returns Number:
		//    {Number}
		//    'Number'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number}
		//'Number'
		public Group getGroup() { return cGroup; }
		
		//{Number}
		public Action getNumberAction_0() { return cNumberAction_0; }
		
		//'Number'
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Boolean returns Boolean:
		//    {Boolean}
		//    'Boolean'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean}
		//'Boolean'
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}
	public class VoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Void");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Void returns Void:
		//    {Void}
		//    'Void'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Void}
		//'Void'
		public Group getGroup() { return cGroup; }
		
		//{Void}
		public Action getVoidAction_0() { return cVoidAction_0; }
		
		//'Void'
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Double");
		private final Keyword cDoubleKeyword = (Keyword)rule.eContents().get(1);
		
		//Double returns type::Double:
		//    'Double' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'Double'
		public Keyword getDoubleKeyword() { return cDoubleKeyword; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.String0");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//String0 returns type::String:
		//    'String' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'String'
		public Keyword getStringKeyword() { return cStringKeyword; }
	}
	public class DefFonctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.DefFonction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefFonctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefFonctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLibelleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLibelleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLibelleString0ParserRuleCall_3_1_0 = (RuleCall)cLibelleAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBlocKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBlocAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBlocInstructionParserRuleCall_4_2_0 = (RuleCall)cBlocAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cBlocAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cBlocInstructionParserRuleCall_4_3_1_0 = (RuleCall)cBlocAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DefFonction returns DefFonction:
		//    {DefFonction}
		//    'DefFonction'
		//    '{'
		//        ('libelle' libelle=String0)?
		//        ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DefFonction}
		//'DefFonction'
		//'{'
		//    ('libelle' libelle=String0)?
		//    ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{DefFonction}
		public Action getDefFonctionAction_0() { return cDefFonctionAction_0; }
		
		//'DefFonction'
		public Keyword getDefFonctionKeyword_1() { return cDefFonctionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('libelle' libelle=String0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'libelle'
		public Keyword getLibelleKeyword_3_0() { return cLibelleKeyword_3_0; }
		
		//libelle=String0
		public Assignment getLibelleAssignment_3_1() { return cLibelleAssignment_3_1; }
		
		//String0
		public RuleCall getLibelleString0ParserRuleCall_3_1_0() { return cLibelleString0ParserRuleCall_3_1_0; }
		
		//('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'bloc'
		public Keyword getBlocKeyword_4_0() { return cBlocKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//bloc+=Instruction
		public Assignment getBlocAssignment_4_2() { return cBlocAssignment_4_2; }
		
		//Instruction
		public RuleCall getBlocInstructionParserRuleCall_4_2_0() { return cBlocInstructionParserRuleCall_4_2_0; }
		
		//( "," bloc+=Instruction)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//bloc+=Instruction
		public Assignment getBlocAssignment_4_3_1() { return cBlocAssignment_4_3_1; }
		
		//Instruction
		public RuleCall getBlocInstructionParserRuleCall_4_3_1_0() { return cBlocInstructionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MovementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Movement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMovementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDirectionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDirectionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDirectionDirectionEnumRuleCall_2_1_0 = (RuleCall)cDirectionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDistanceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDistanceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDistanceDoubleParserRuleCall_3_1_0 = (RuleCall)cDistanceAssignment_3_1.eContents().get(0);
		private final Keyword cMetriqueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMetriqueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMetriqueMetriqueParserRuleCall_5_0 = (RuleCall)cMetriqueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Movement returns Movement:
		//    'Movement'
		//    '{'
		//        ('direction' direction=Direction)?
		//        ('distance' distance=Double)?
		//        'metrique' metrique=Metrique
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Movement'
		//'{'
		//    ('direction' direction=Direction)?
		//    ('distance' distance=Double)?
		//    'metrique' metrique=Metrique
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Movement'
		public Keyword getMovementKeyword_0() { return cMovementKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('direction' direction=Direction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'direction'
		public Keyword getDirectionKeyword_2_0() { return cDirectionKeyword_2_0; }
		
		//direction=Direction
		public Assignment getDirectionAssignment_2_1() { return cDirectionAssignment_2_1; }
		
		//Direction
		public RuleCall getDirectionDirectionEnumRuleCall_2_1_0() { return cDirectionDirectionEnumRuleCall_2_1_0; }
		
		//('distance' distance=Double)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'distance'
		public Keyword getDistanceKeyword_3_0() { return cDistanceKeyword_3_0; }
		
		//distance=Double
		public Assignment getDistanceAssignment_3_1() { return cDistanceAssignment_3_1; }
		
		//Double
		public RuleCall getDistanceDoubleParserRuleCall_3_1_0() { return cDistanceDoubleParserRuleCall_3_1_0; }
		
		//'metrique'
		public Keyword getMetriqueKeyword_4() { return cMetriqueKeyword_4; }
		
		//metrique=Metrique
		public Assignment getMetriqueAssignment_5() { return cMetriqueAssignment_5; }
		
		//Metrique
		public RuleCall getMetriqueMetriqueParserRuleCall_5_0() { return cMetriqueMetriqueParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Rotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRotationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSensKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSensAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSensSensRotationEnumRuleCall_3_1_0 = (RuleCall)cSensAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDegreKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDegreAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDegreDoubleParserRuleCall_4_1_0 = (RuleCall)cDegreAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rotation returns Rotation:
		//    {Rotation}
		//    'Rotation'
		//    '{'
		//        ('sens' sens=SensRotation)?
		//        ('degre' degre=Double)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Rotation}
		//'Rotation'
		//'{'
		//    ('sens' sens=SensRotation)?
		//    ('degre' degre=Double)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Rotation}
		public Action getRotationAction_0() { return cRotationAction_0; }
		
		//'Rotation'
		public Keyword getRotationKeyword_1() { return cRotationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('sens' sens=SensRotation)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'sens'
		public Keyword getSensKeyword_3_0() { return cSensKeyword_3_0; }
		
		//sens=SensRotation
		public Assignment getSensAssignment_3_1() { return cSensAssignment_3_1; }
		
		//SensRotation
		public RuleCall getSensSensRotationEnumRuleCall_3_1_0() { return cSensSensRotationEnumRuleCall_3_1_0; }
		
		//('degre' degre=Double)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'degre'
		public Keyword getDegreKeyword_4_0() { return cDegreKeyword_4_0; }
		
		//degre=Double
		public Assignment getDegreAssignment_4_1() { return cDegreAssignment_4_1; }
		
		//Double
		public RuleCall getDegreDoubleParserRuleCall_4_1_0() { return cDegreDoubleParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBlocKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBlocAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBlocInstructionParserRuleCall_2_2_0 = (RuleCall)cBlocAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cBlocAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cBlocInstructionParserRuleCall_2_3_1_0 = (RuleCall)cBlocAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cConditionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Loop returns Loop:
		//    'Loop'
		//    '{'
		//        ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		//        'condition' condition=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Loop'
		//'{'
		//    ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		//    'condition' condition=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'bloc'
		public Keyword getBlocKeyword_2_0() { return cBlocKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//bloc+=Instruction
		public Assignment getBlocAssignment_2_2() { return cBlocAssignment_2_2; }
		
		//Instruction
		public RuleCall getBlocInstructionParserRuleCall_2_2_0() { return cBlocInstructionParserRuleCall_2_2_0; }
		
		//( "," bloc+=Instruction)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//bloc+=Instruction
		public Assignment getBlocAssignment_2_3_1() { return cBlocAssignment_2_3_1; }
		
		//Instruction
		public RuleCall getBlocInstructionParserRuleCall_2_3_1_0() { return cBlocInstructionParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'condition'
		public Keyword getConditionKeyword_3() { return cConditionKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBlocKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBlocAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBlocInstructionParserRuleCall_2_2_0 = (RuleCall)cBlocAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cBlocAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cBlocInstructionParserRuleCall_2_3_1_0 = (RuleCall)cBlocAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cConditionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Condition returns Condition:
		//    'Condition'
		//    '{'
		//        ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		//        'condition' condition=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition'
		//'{'
		//    ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		//    'condition' condition=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'bloc'
		public Keyword getBlocKeyword_2_0() { return cBlocKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//bloc+=Instruction
		public Assignment getBlocAssignment_2_2() { return cBlocAssignment_2_2; }
		
		//Instruction
		public RuleCall getBlocInstructionParserRuleCall_2_2_0() { return cBlocInstructionParserRuleCall_2_2_0; }
		
		//( "," bloc+=Instruction)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//bloc+=Instruction
		public Assignment getBlocAssignment_2_3_1() { return cBlocAssignment_2_3_1; }
		
		//Instruction
		public RuleCall getBlocInstructionParserRuleCall_2_3_1_0() { return cBlocInstructionParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'condition'
		public Keyword getConditionKeyword_3() { return cConditionKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SetSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.SetSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVitesseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVitesseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVitesseEDoubleParserRuleCall_2_1_0 = (RuleCall)cVitesseAssignment_2_1.eContents().get(0);
		private final Keyword cMetriqueKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetriqueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetriqueMetriqueParserRuleCall_4_0 = (RuleCall)cMetriqueAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SetSpeed returns SetSpeed:
		//    'SetSpeed'
		//    '{'
		//        ('vitesse' vitesse=EDouble)?
		//        'metrique' metrique=Metrique
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SetSpeed'
		//'{'
		//    ('vitesse' vitesse=EDouble)?
		//    'metrique' metrique=Metrique
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SetSpeed'
		public Keyword getSetSpeedKeyword_0() { return cSetSpeedKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('vitesse' vitesse=EDouble)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'vitesse'
		public Keyword getVitesseKeyword_2_0() { return cVitesseKeyword_2_0; }
		
		//vitesse=EDouble
		public Assignment getVitesseAssignment_2_1() { return cVitesseAssignment_2_1; }
		
		//EDouble
		public RuleCall getVitesseEDoubleParserRuleCall_2_1_0() { return cVitesseEDoubleParserRuleCall_2_1_0; }
		
		//'metrique'
		public Keyword getMetriqueKeyword_3() { return cMetriqueKeyword_3; }
		
		//metrique=Metrique
		public Assignment getMetriqueAssignment_4() { return cMetriqueAssignment_4; }
		
		//Metrique
		public RuleCall getMetriqueMetriqueParserRuleCall_4_0() { return cMetriqueMetriqueParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GetTimestampElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.getTimestamp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGetTimestampAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGetTimestampKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//getTimestamp returns getTimestamp:
		//    {getTimestamp}
		//    'getTimestamp'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{getTimestamp}
		//'getTimestamp'
		public Group getGroup() { return cGroup; }
		
		//{getTimestamp}
		public Action getGetTimestampAction_0() { return cGetTimestampAction_0; }
		
		//'getTimestamp'
		public Keyword getGetTimestampKeyword_1() { return cGetTimestampKeyword_1; }
	}
	public class CentimeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Centimeter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCentimeterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCentimeterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Centimeter returns Centimeter:
		//    {Centimeter}
		//    'Centimeter'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Centimeter}
		//'Centimeter'
		public Group getGroup() { return cGroup; }
		
		//{Centimeter}
		public Action getCentimeterAction_0() { return cCentimeterAction_0; }
		
		//'Centimeter'
		public Keyword getCentimeterKeyword_1() { return cCentimeterKeyword_1; }
	}
	public class MeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Meter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMeterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMeterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Meter returns Meter:
		//    {Meter}
		//    'Meter'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Meter}
		//'Meter'
		public Group getGroup() { return cGroup; }
		
		//{Meter}
		public Action getMeterAction_0() { return cMeterAction_0; }
		
		//'Meter'
		public Keyword getMeterKeyword_1() { return cMeterKeyword_1; }
	}
	public class MillimeterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Millimeter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMillimeterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMillimeterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Millimeter returns Millimeter:
		//    {Millimeter}
		//    'Millimeter'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Millimeter}
		//'Millimeter'
		public Group getGroup() { return cGroup; }
		
		//{Millimeter}
		public Action getMillimeterAction_0() { return cMillimeterAction_0; }
		
		//'Millimeter'
		public Keyword getMillimeterKeyword_1() { return cMillimeterKeyword_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class DirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForwardEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForwardForwardKeyword_0_0 = (Keyword)cForwardEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackwardEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackwardBackwardKeyword_1_0 = (Keyword)cBackwardEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLeftLeftKeyword_2_0 = (Keyword)cLeftEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRightRightKeyword_3_0 = (Keyword)cRightEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Direction returns Direction:
		//                Forward = 'Forward' | Backward = 'Backward' | Left = 'Left' | Right = 'Right';
		public EnumRule getRule() { return rule; }
		
		//Forward = 'Forward' | Backward = 'Backward' | Left = 'Left' | Right = 'Right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Forward = 'Forward'
		public EnumLiteralDeclaration getForwardEnumLiteralDeclaration_0() { return cForwardEnumLiteralDeclaration_0; }
		
		//'Forward'
		public Keyword getForwardForwardKeyword_0_0() { return cForwardForwardKeyword_0_0; }
		
		//Backward = 'Backward'
		public EnumLiteralDeclaration getBackwardEnumLiteralDeclaration_1() { return cBackwardEnumLiteralDeclaration_1; }
		
		//'Backward'
		public Keyword getBackwardBackwardKeyword_1_0() { return cBackwardBackwardKeyword_1_0; }
		
		//Left = 'Left'
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_2() { return cLeftEnumLiteralDeclaration_2; }
		
		//'Left'
		public Keyword getLeftLeftKeyword_2_0() { return cLeftLeftKeyword_2_0; }
		
		//Right = 'Right'
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_3() { return cRightEnumLiteralDeclaration_3; }
		
		//'Right'
		public Keyword getRightRightKeyword_3_0() { return cRightRightKeyword_3_0; }
	}
	public class SensRotationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.botch.B0tch.SensRotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cClockEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cClockClockKeyword_0_0 = (Keyword)cClockEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCounterClockEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCounterClockCounterClockKeyword_1_0 = (Keyword)cCounterClockEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SensRotation returns SensRotation:
		//                Clock = 'Clock' | CounterClock = 'CounterClock';
		public EnumRule getRule() { return rule; }
		
		//Clock = 'Clock' | CounterClock = 'CounterClock'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Clock = 'Clock'
		public EnumLiteralDeclaration getClockEnumLiteralDeclaration_0() { return cClockEnumLiteralDeclaration_0; }
		
		//'Clock'
		public Keyword getClockClockKeyword_0_0() { return cClockClockKeyword_0_0; }
		
		//CounterClock = 'CounterClock'
		public EnumLiteralDeclaration getCounterClockEnumLiteralDeclaration_1() { return cCounterClockEnumLiteralDeclaration_1; }
		
		//'CounterClock'
		public Keyword getCounterClockCounterClockKeyword_1_0() { return cCounterClockCounterClockKeyword_1_0; }
	}
	
	private final AddElements pAdd;
	private final ExpressionElements pExpression;
	private final TypeElements pType;
	private final InstructionElements pInstruction;
	private final MetriqueElements pMetrique;
	private final ConsultVariableElements pConsultVariable;
	private final ConstanteElements pConstante;
	private final CallFonctionElements pCallFonction;
	private final MinusElements pMinus;
	private final TimesElements pTimes;
	private final DivideElements pDivide;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final InverseElements pInverse;
	private final NotElements pNot;
	private final MoreThanElements pMoreThan;
	private final LessThanElements pLessThan;
	private final EqualElements pEqual;
	private final DefVariableElements pDefVariable;
	private final EStringElements pEString;
	private final NumberElements pNumber;
	private final BooleanElements pBoolean;
	private final VoidElements pVoid;
	private final DoubleElements pDouble;
	private final String0Elements pString0;
	private final DefFonctionElements pDefFonction;
	private final MovementElements pMovement;
	private final RotationElements pRotation;
	private final LoopElements pLoop;
	private final ConditionElements pCondition;
	private final SetSpeedElements pSetSpeed;
	private final GetTimestampElements pGetTimestamp;
	private final DirectionElements eDirection;
	private final CentimeterElements pCentimeter;
	private final MeterElements pMeter;
	private final MillimeterElements pMillimeter;
	private final SensRotationElements eSensRotation;
	private final EDoubleElements pEDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public B0tchGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAdd = new AddElements();
		this.pExpression = new ExpressionElements();
		this.pType = new TypeElements();
		this.pInstruction = new InstructionElements();
		this.pMetrique = new MetriqueElements();
		this.pConsultVariable = new ConsultVariableElements();
		this.pConstante = new ConstanteElements();
		this.pCallFonction = new CallFonctionElements();
		this.pMinus = new MinusElements();
		this.pTimes = new TimesElements();
		this.pDivide = new DivideElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pInverse = new InverseElements();
		this.pNot = new NotElements();
		this.pMoreThan = new MoreThanElements();
		this.pLessThan = new LessThanElements();
		this.pEqual = new EqualElements();
		this.pDefVariable = new DefVariableElements();
		this.pEString = new EStringElements();
		this.pNumber = new NumberElements();
		this.pBoolean = new BooleanElements();
		this.pVoid = new VoidElements();
		this.pDouble = new DoubleElements();
		this.pString0 = new String0Elements();
		this.pDefFonction = new DefFonctionElements();
		this.pMovement = new MovementElements();
		this.pRotation = new RotationElements();
		this.pLoop = new LoopElements();
		this.pCondition = new ConditionElements();
		this.pSetSpeed = new SetSpeedElements();
		this.pGetTimestamp = new GetTimestampElements();
		this.eDirection = new DirectionElements();
		this.pCentimeter = new CentimeterElements();
		this.pMeter = new MeterElements();
		this.pMillimeter = new MillimeterElements();
		this.eSensRotation = new SensRotationElements();
		this.pEDouble = new EDoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.botch.B0tch".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Add returns Add:
	//    'Add'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Expression returns Expression:
	//    ConsultVariable | Constante | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Type returns Type:
	//    Number | Boolean | Void;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Instruction returns Instruction:
	//    Movement | Rotation | Loop | DefVariable | Condition | DefFonction | ConsultVariable | Constante | SetSpeed | getTimestamp | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Metrique returns Metrique:
	//    Centimeter | Meter | Millimeter;
	public MetriqueElements getMetriqueAccess() {
		return pMetrique;
	}
	
	public ParserRule getMetriqueRule() {
		return getMetriqueAccess().getRule();
	}
	
	//ConsultVariable returns ConsultVariable:
	//    'ConsultVariable'
	//    '{'
	//        'defvariable' defvariable=[DefVariable|EString]
	//    '}';
	public ConsultVariableElements getConsultVariableAccess() {
		return pConsultVariable;
	}
	
	public ParserRule getConsultVariableRule() {
		return getConsultVariableAccess().getRule();
	}
	
	//Constante returns Constante:
	//    {Constante}
	//    'Constante'
	//    '{'
	//        ('value' value=Double)?
	//    '}';
	public ConstanteElements getConstanteAccess() {
		return pConstante;
	}
	
	public ParserRule getConstanteRule() {
		return getConstanteAccess().getRule();
	}
	
	//CallFonction returns CallFonction:
	//    'CallFonction'
	//    '{'
	//        ('libelle' libelle=String0)?
	//        'refFonction' refFonction=[DefFonction|EString]
	//    '}';
	public CallFonctionElements getCallFonctionAccess() {
		return pCallFonction;
	}
	
	public ParserRule getCallFonctionRule() {
		return getCallFonctionAccess().getRule();
	}
	
	//Minus returns Minus:
	//    'Minus'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Times returns Times:
	//    'Times'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public TimesElements getTimesAccess() {
		return pTimes;
	}
	
	public ParserRule getTimesRule() {
		return getTimesAccess().getRule();
	}
	
	//Divide returns Divide:
	//    'Divide'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public DivideElements getDivideAccess() {
		return pDivide;
	}
	
	public ParserRule getDivideRule() {
		return getDivideAccess().getRule();
	}
	
	//And returns And:
	//    'And'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Or returns Or:
	//    'Or'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Inverse returns Inverse:
	//    'Inverse'
	//    '{'
	//        'x' x=Expression
	//    '}';
	public InverseElements getInverseAccess() {
		return pInverse;
	}
	
	public ParserRule getInverseRule() {
		return getInverseAccess().getRule();
	}
	
	//Not returns Not:
	//    'Not'
	//    '{'
	//        'x' x=Expression
	//    '}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//MoreThan returns MoreThan:
	//    'MoreThan'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public MoreThanElements getMoreThanAccess() {
		return pMoreThan;
	}
	
	public ParserRule getMoreThanRule() {
		return getMoreThanAccess().getRule();
	}
	
	//LessThan returns LessThan:
	//    'LessThan'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public LessThanElements getLessThanAccess() {
		return pLessThan;
	}
	
	public ParserRule getLessThanRule() {
		return getLessThanAccess().getRule();
	}
	
	//Equal returns Equal:
	//    'Equal'
	//    '{'
	//        'x' x=Expression
	//        'y' y=Expression
	//    '}';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//DefVariable returns DefVariable:
	//    'DefVariable'
	//    '{'
	//        ('libelle' libelle=EString)?
	//        'type' type=Type
	//        'valeur' valeur=Expression
	//    '}';
	public DefVariableElements getDefVariableAccess() {
		return pDefVariable;
	}
	
	public ParserRule getDefVariableRule() {
		return getDefVariableAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Number returns Number:
	//    {Number}
	//    'Number'
	//    ;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Boolean returns Boolean:
	//    {Boolean}
	//    'Boolean'
	//    ;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Void returns Void:
	//    {Void}
	//    'Void'
	//    ;
	public VoidElements getVoidAccess() {
		return pVoid;
	}
	
	public ParserRule getVoidRule() {
		return getVoidAccess().getRule();
	}
	
	//Double returns type::Double:
	//    'Double' /* TODO: implement this rule and an appropriate IValueConverter */;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//String0 returns type::String:
	//    'String' /* TODO: implement this rule and an appropriate IValueConverter */;
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//DefFonction returns DefFonction:
	//    {DefFonction}
	//    'DefFonction'
	//    '{'
	//        ('libelle' libelle=String0)?
	//        ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
	//    '}';
	public DefFonctionElements getDefFonctionAccess() {
		return pDefFonction;
	}
	
	public ParserRule getDefFonctionRule() {
		return getDefFonctionAccess().getRule();
	}
	
	//Movement returns Movement:
	//    'Movement'
	//    '{'
	//        ('direction' direction=Direction)?
	//        ('distance' distance=Double)?
	//        'metrique' metrique=Metrique
	//    '}';
	public MovementElements getMovementAccess() {
		return pMovement;
	}
	
	public ParserRule getMovementRule() {
		return getMovementAccess().getRule();
	}
	
	//Rotation returns Rotation:
	//    {Rotation}
	//    'Rotation'
	//    '{'
	//        ('sens' sens=SensRotation)?
	//        ('degre' degre=Double)?
	//    '}';
	public RotationElements getRotationAccess() {
		return pRotation;
	}
	
	public ParserRule getRotationRule() {
		return getRotationAccess().getRule();
	}
	
	//Loop returns Loop:
	//    'Loop'
	//    '{'
	//        ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
	//        'condition' condition=Expression
	//    '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Condition returns Condition:
	//    'Condition'
	//    '{'
	//        ('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
	//        'condition' condition=Expression
	//    '}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//SetSpeed returns SetSpeed:
	//    'SetSpeed'
	//    '{'
	//        ('vitesse' vitesse=EDouble)?
	//        'metrique' metrique=Metrique
	//    '}';
	public SetSpeedElements getSetSpeedAccess() {
		return pSetSpeed;
	}
	
	public ParserRule getSetSpeedRule() {
		return getSetSpeedAccess().getRule();
	}
	
	//getTimestamp returns getTimestamp:
	//    {getTimestamp}
	//    'getTimestamp'
	//    ;
	public GetTimestampElements getGetTimestampAccess() {
		return pGetTimestamp;
	}
	
	public ParserRule getGetTimestampRule() {
		return getGetTimestampAccess().getRule();
	}
	
	//enum Direction returns Direction:
	//                Forward = 'Forward' | Backward = 'Backward' | Left = 'Left' | Right = 'Right';
	public DirectionElements getDirectionAccess() {
		return eDirection;
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}
	
	//Centimeter returns Centimeter:
	//    {Centimeter}
	//    'Centimeter'
	//    ;
	public CentimeterElements getCentimeterAccess() {
		return pCentimeter;
	}
	
	public ParserRule getCentimeterRule() {
		return getCentimeterAccess().getRule();
	}
	
	//Meter returns Meter:
	//    {Meter}
	//    'Meter'
	//    ;
	public MeterElements getMeterAccess() {
		return pMeter;
	}
	
	public ParserRule getMeterRule() {
		return getMeterAccess().getRule();
	}
	
	//Millimeter returns Millimeter:
	//    {Millimeter}
	//    'Millimeter'
	//    ;
	public MillimeterElements getMillimeterAccess() {
		return pMillimeter;
	}
	
	public ParserRule getMillimeterRule() {
		return getMillimeterAccess().getRule();
	}
	
	//enum SensRotation returns SensRotation:
	//                Clock = 'Clock' | CounterClock = 'CounterClock';
	public SensRotationElements getSensRotationAccess() {
		return eSensRotation;
	}
	
	public EnumRule getSensRotationRule() {
		return getSensRotationAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
