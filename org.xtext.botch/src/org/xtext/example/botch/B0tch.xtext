// automatically generated by Xtext
grammar org.xtext.example.botch.B0tch with org.eclipse.xtext.common.Terminals

import "http://www.example.org/tP_IDM" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Add returns Add:
	'Add'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

Expression returns Expression:
	ConsultVariable | Constante | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal;



Type returns Type:
	Number | Boolean | Void;

Instruction returns Instruction:
	Movement | Rotation | Loop | DefVariable | Condition | DefFonction | ConsultVariable | Constante | SetSpeed | getTimestamp | CallFonction | Add | Minus | Times | Divide | And | Or | Inverse | Not | MoreThan | LessThan | Equal;

Metrique returns Metrique:
	Centimeter | Meter | Millimeter;

ConsultVariable returns ConsultVariable:
	'ConsultVariable'
	'{'
		'defvariable' defvariable=[DefVariable|EString]
	'}';

Constante returns Constante:
	{Constante}
	'Constante'
	'{'
		('value' value=Double)?
	'}';

CallFonction returns CallFonction:
	'CallFonction'
	'{'
		('libelle' libelle=String0)?
		'refFonction' refFonction=[DefFonction|EString]
	'}';

Minus returns Minus:
	'Minus'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

Times returns Times:
	'Times'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

Divide returns Divide:
	'Divide'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

And returns And:
	'And'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

Or returns Or:
	'Or'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

Inverse returns Inverse:
	'Inverse'
	'{'
		'x' x=Expression
	'}';

Not returns Not:
	'Not'
	'{'
		'x' x=Expression
	'}';

MoreThan returns MoreThan:
	'MoreThan'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

LessThan returns LessThan:
	'LessThan'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

Equal returns Equal:
	'Equal'
	'{'
		'x' x=Expression
		'y' y=Expression
	'}';

DefVariable returns DefVariable:
	'DefVariable'
	'{'
		('libelle' libelle=EString)?
		'type' type=Type
		'valeur' valeur=Expression
	'}';

EString returns ecore::EString:
	STRING | ID;

Number returns Number:
	{Number}
	'Number'
	;

Boolean returns Boolean:
	{Boolean}
	'Boolean'
	;

Void returns Void:
	{Void}
	'Void'
	;

Double returns type::Double:
	'Double' /* TODO: implement this rule and an appropriate IValueConverter */;

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

DefFonction returns DefFonction:
	{DefFonction}
	'DefFonction'
	'{'
		('libelle' libelle=String0)?
		('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
	'}';

Movement returns Movement:
	'Movement'
	'{'
		('direction' direction=Direction)?
		('distance' distance=Double)?
		'metrique' metrique=Metrique
	'}';

Rotation returns Rotation:
	{Rotation}
	'Rotation'
	'{'
		('sens' sens=SensRotation)?
		('degre' degre=Double)?
	'}';

Loop returns Loop:
	'Loop'
	'{'
		('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		'condition' condition=Expression
	'}';

Condition returns Condition:
	'Condition'
	'{'
		('bloc' '{' bloc+=Instruction ( "," bloc+=Instruction)* '}' )?
		'condition' condition=Expression
	'}';

SetSpeed returns SetSpeed:
	'SetSpeed'
	'{'
		('vitesse' vitesse=EDouble)?
		'metrique' metrique=Metrique
	'}';

getTimestamp returns getTimestamp:
	{getTimestamp}
	'getTimestamp'
	;

enum Direction returns Direction:
				Forward = 'Forward' | Backward = 'Backward' | Left = 'Left' | Right = 'Right';

Centimeter returns Centimeter:
	{Centimeter}
	'Centimeter'
	;

Meter returns Meter:
	{Meter}
	'Meter'
	;

Millimeter returns Millimeter:
	{Millimeter}
	'Millimeter'
	;

enum SensRotation returns SensRotation:
				Clock = 'Clock' | CounterClock = 'CounterClock';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
